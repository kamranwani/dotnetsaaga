## ✅ C# Learning Notes (Lecture 1 to Now)

---

### 📘 **Lecture 1: Introduction to C# and .NET**

* **C#** is an object-oriented programming language developed by Microsoft.
* It runs on the **.NET platform**, which provides runtime (CLR) and libraries (BCL/FCL).
* **.NET Core / .NET 5+** is cross-platform and modern version of .NET.
* A basic C# program is a **Console Application** with a `Main` method as the entry point.

**Example:**

```csharp
using System;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
    }
}
```

---

### 📗 **Lecture 2: Input, Output, and Data Types**

#### 👉 **User Input / Output**

* Use `Console.WriteLine()` to output to console.
* Use `Console.ReadLine()` to read from console.
* Use `TryParse()` to convert and validate data types from string inputs.

#### 👉 **Primitive Data Types**

| Data Type | Bytes | Range                           | Example                 |
| --------- | ----- | ------------------------------- | ----------------------- |
| `byte`    | 1     | 0 to 255                        | `byte b = 10;`          |
| `sbyte`   | 1     | -128 to 127                     |                         |
| `short`   | 2     | -32,768 to 32,767               |                         |
| `ushort`  | 2     | 0 to 65,535                     |                         |
| `int`     | 4     | -2,147,483,648 to 2,147,483,647 | `int age = 25;`         |
| `uint`    | 4     | 0 to 4,294,967,295              |                         |
| `long`    | 8     | Huge Range                      |                         |
| `float`   | 4     | \~6-9 digits precision          | `float pi = 3.14f;`     |
| `double`  | 8     | \~15-17 digits precision        | `double d = 3.14159;`   |
| `decimal` | 16    | \~28-29 digits precision        | For financial data      |
| `char`    | 2     | Unicode character               | `char ch = 'A';`        |
| `bool`    | 1 bit | true or false                   | `bool isTrue = true;`   |
| `string`  | N/A   | Sequence of chars               | `string name = "John";` |

---

### 📘 **Lecture 3: `out`, `ref`, `in` Parameters & Method Definitions**

* `out`: Used to return a value from a method.

  * Value must be assigned inside the method.
* `ref`: Passes a reference, so the method can modify the original value.
* `in`: Like `ref`, but **read-only**. Value cannot be changed inside the method.

```csharp
void GetSum(int a, int b, out int sum)
{
    sum = a + b;
}

void ReadOnlyExample(in int num)
{
    Console.WriteLine(num); // can't modify num
}
```

---

### 📗 **Lecture 4: Namespaces, Classes, and Access Modifiers**

#### ✔️ **Namespaces**

* A way to organize and group related classes.

```csharp
namespace MyFirstApp
{
    class MyClass { }
}
```

#### ✔️ **Classes and Methods**

* `class` is a blueprint for objects.
* Methods can be `static` (called without object) or instance methods.

#### ✔️ **Access Modifiers**

| Modifier    | Accessible Within | Across Projects | Example                              |
| ----------- | ----------------- | --------------- | ------------------------------------ |
| `private`   | Same class        | ❌               | Default for class members            |
| `internal`  | Same project      | ❌               | Default for classes                  |
| `public`    | Everywhere        | ✅               | Needed to access from other projects |
| `protected` | Derived classes   | ❌               |                                      |

---

### 🛠️ **Lecture 5: Creating Multiple Projects and Using Classes Across Projects**

* You can create a **solution** with multiple projects.
* To **use a class from another project**, you must:

  * Make the class `public`.
  * Add a **project reference** (Right-click → Add → Project Reference).
  * Use the proper `using` statement.

```csharp
// In ProjectTwo
namespace ProjectTwo
{
    public class AreaAndPerimeter
    {
        public static float CalArea(in float l, in float w) => l * w;
        public static float CalPerimeter(in float l, in float w) => 2 * (l + w);
    }
}

// In MyFirstApp
using ProjectTwo;
float area = AreaAndPerimeter.CalArea(5, 3);
```

#### ✏️ Internal class in another project?

* `internal` classes are only accessible within the same project.
* To use in another project, make them `public`.

---

### 📄 Additional Concepts Covered

* `Main` method is the starting point of execution.
* `Console.ReadLine()` returns string. Use `TryParse()` for safe conversion.
* Value Types vs Reference Types:

  * Value types store data directly (e.g., int, float).
  * Reference types store a reference to the data (e.g., string, arrays, class).
* Multi-project solutions help modularize your code.

---


---


#### 🔹 Memory Allocation: Stack vs Heap

* **Stack:**

  * Stores value types (e.g., `int`, `bool`, etc.)
  * Stores references (addresses) of objects created on the heap
  * Has limited memory
  * Fast access (LIFO structure)
* **Heap:**

  * Stores actual objects created using `new`
  * Stores reference type data (e.g., class instances, arrays)
  * Garbage collected

**Example:**

```csharp
Employee e1 = new Employee();
Employee e2 = new Employee();
```

* `e1` and `e2` are stored on the stack (they hold addresses)
* Actual `Employee` objects are on the heap

---

### 🔹 Static vs Non-Static Members

* **Static member:**

  * Belongs to the class, not the instance
  * Shared across all objects
  * Accessed using the class name: `ClassName.StaticMember`

* **Non-static member:**

  * Unique to each object
  * Accessed via the object: `objectName.NonStaticMember`

**Example:**

```csharp
public class Emp {
    public int id = 10;         // Non-static (each object gets its own id)
    public static int count = 0; // Static (shared)

    public void Fun1() {
        Console.WriteLine(id);     // Works
        Console.WriteLine(count);  // Works (can access static from non-static)
    }

    public static void Fun2() {
        // Console.WriteLine(id); // ❌ Error: can't access non-static from static
        Console.WriteLine(count);  // ✅ Works
    }
}
```

📌 Static methods **cannot** access non-static variables because there's no object context (`this` is not available).

---

### 🔹 Recursion & Stack Overflow

* A **recursive function** calls itself
* Requires a **base case** to stop recursion
* Each recursive call goes on the **stack** → too many calls without returning = **stack overflow**

**Example:**

```csharp
int Factorial(int n) {
    if (n == 1) return 1; // base case
    return n * Factorial(n - 1); // recursive case
}
```

**Dry run for `Factorial(3)`**:

```
Factorial(3) = 3 * Factorial(2)
Factorial(2) = 2 * Factorial(1)
Factorial(1) = 1
Result = 3 * 2 * 1 = 6
```

---


-------------- July 24 ------------------

declaration and defination in functions

function overloading

2 rules 
either number of argumements must be different 
or arguemnt type must be different

compile time or tatic binding or early binding

runtime or dynamic binding or late binding

polymorphism many shapes
2 types dyanamic and static
static poly overloading
dynamic tbd...

binding.

chat gpt 



### 🔹 **Function Declaration vs Definition**

* **Declaration:**
  Just tells the compiler a function exists (in some languages, needed when the definition is later in the code).

* **Definition:**
  Includes the full function body with logic.

**Example:**

```csharp
// Declaration (in some languages)
// int Add(int a, int b);

// Definition
int Add(int a, int b) {
    return a + b;
}
```

In **C#**, declaration and definition are usually together.

---

### 🔹 **Function Overloading** (Compile-time Polymorphism)

Function overloading means creating **multiple methods with the same name** but **different parameters**.

✅ **Two Rules:**

1. **Number of arguments must differ**
2. **Or types of arguments must differ**

❌ Return type alone cannot differentiate overloaded methods.

**Example:**

```csharp
void Print(int x) { }
void Print(string x) { }     // valid (type differs)
void Print(int x, int y) { } // valid (number differs)
```

---

### 🔹 **Binding in C# (Linking Call to Code)**

* **Binding:** The process of connecting a method call to the actual method code.

---

### 🔹 **Types of Binding / Polymorphism**

#### 1. **Static / Compile-time Binding**

* Also called: **Early binding**
* Done at **compile time**
* Example: **Function Overloading**

#### 2. **Dynamic / Run-time Binding**

* Also called: **Late binding**
* Done at **runtime**
* Example: **Function Overriding** (covered later)

---

### 🔹 **Polymorphism** = Many Forms

Polymorphism allows objects or methods to **behave in different ways** based on context.

#### Two Types:

1. **Static Polymorphism** → **Method Overloading**
2. **Dynamic Polymorphism** → (To be studied: involves inheritance + overriding)

---


---------------------------------------------- JULY 25 2025 --------------------------------------------

constructor is a special func that makes our object
and is called by compiler if we don't make it ourselves
also called default constructor (made by compiler)
zero arguement constructor
default vlue of refrence type and value type 
default constructor because default value being put into it


copy constructor
thi keyword

if we write constructor there is still always copy constructor.
shallow copy
deep copy

== vs equals basic difference shalow v deep comparison 

static constructor used to give default values to static fields


static default parameterised copy 
obj and static broad view

high density heap 
















